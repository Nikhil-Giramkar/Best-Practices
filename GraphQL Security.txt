How to secure? - https://www.apollographql.com/blog/9-ways-to-secure-your-graphql-api-security-checklist 

1. Authentication
Authentication is determining whether a given user is logged in and subsequently remembering who they are. 
Authentication can provide context to a session and personalize the type of data that a user sees.
----------------------------------------------------

2. Authorization
Authorization is then determining what a given user has permission to do or see. 
In GraphQL, we’d use this to manage access to particular queries and mutations based on identity, role, or permissions.
----------------------------------------------------

3. Limit Query Depth
GraphQL gives clients the ability to ask for data in a variety of different ways. 
Because of the various entry-points available to request data, 
it’s possible to write exceptionally large nested queries like the following.

query {
  author(id: 42) {
    posts {
      author {
        posts {
          author {
            posts {
              author {
                # and so on...
              }
            }
          }
        }
      }
    }
  }
}

Queries like this are dangerous because they’re expensive to compute. 
They could crash our API and take up all available resources.
----------------------------------------------------

4. Pagination
Query depth isn’t the only thing to worry about. 
We should also be conscious of how query amount could affect the performance of our API.
In the following example, if there were 10 authors, each with 100 posts, this query would attempt to return 100,000 nodes.

query {
  authors(first: 1000) {
    name
    posts(last: 100) {
      title
      content
    }
  }
}

Running a query like this would undoubtedly slow down (if it doesn’t DoS) your server.
To prevent this from happening, we recommend using pagination when appropriate, capping the input number in your resolve
----------------------------------------------------

5. Improve validation and sanitization
Validation and sanitization are standard web application security practices. 
When you accept data from a user, one should always expect that user-provided data could be malicious.

There are two especially malicious techniques in this area: 
    data exfiltration and 
    data destruction.

Data exfiltration is when a client writes a malicious query containing SQL or NoSQL code that tricks the database 
into returning more data than originally intended. 
For example, the following un-sanitized query could trick a SQL-based data source into returning all of the fields for a user, 
including their email and hashed password.

query User {
  user (id: "User*") {
    email
    id 
  }
}

The other technique (data destruction) is when a client writes a malicious query — 
again containing some database-layer code — that can destroy production data when executed.

Reject invalid input without giving away too many details
Leverage the GraphQL schema to support validation
Beware of using JSON scalars (they are a lot more prone to malicious queries if not properly sanitized)

----------------------------------------------------

6. Use timeouts
When we request data from downstream services or data sources, there are various reasons why it may take a long time to respond. 
The services may be down, queries may be expensive, or something else might be going on. 
Regardless of the reason, we don’t want our GraphQL API to hang for too long, waiting for a response.
----------------------------------------------------

7. Rate limit APIs

Rate limiting is when you dictate how many requests a client can make per some time.
Often, we use rate-limiting to prevent brute-forcing login details, scraping data, or denial of service attacks.
----------------------------------------------------

8. Turn off introspection in production
Doing so prevents accidentally sharing business secrets and vastly reduces the ability of a malicious actor to discover how to abuse a GraphQL API.
----------------------------------------------------

9. Mask errors
When server or downstream service errors occur, 
it’s a good idea to withhold the exact specifics of what went wrong from the client.

Informing the client about error details in the server exposes the current server vulnerabilities and opens the door for more concentrated attacks.
----------------------------------------------------
